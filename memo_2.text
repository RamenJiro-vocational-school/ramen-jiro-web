# GitHub 追加知識まとめ（初心者→中級ステップ）
--------------------------
1. Pull Request（PR） : 「味見してOKをもらう儀式」

* 目的 : いきなり main に入れず、別ブランチの変更をレビューしてもらう
* 使うタイミング : 新機能や修正が一段落したとき
* 手順 :

  1. 変更をブランチに push
  2. GitHub で「Compare & pull request」→説明を書く→Create PR
  3. OKが出たら「Merge」ボタンで main に取り込む

--------------------------
2. Issues : 「やることメモ」

* 目的 : バグ・要望・TODOを記録する
* 使うタイミング : 「あとでやる」「バグ見つけた」と思った瞬間
* 手順 : GitHubの Issues タブ → New Issue → タイトルと内容を記入

--------------------------
3. Projects : 「看板ボードで進捗管理」

* 目的 : Issues を未着手→進行中→完了のようにボード管理
* 手順 : Projects → 新規作成 → カラムに Issues をドラッグ

--------------------------
4. GitHub Actions : 「自動でやっときます係」

* 目的 : push されたら自動でテスト・ビルド・デプロイ
* 例 : Reactアプリなら push 時に自動ビルドして GitHub Pages に公開
* 手順 : GitHub Actions タブ → テンプレートを選んでON

--------------------------
5. Fork & Pull : 「他人のレシピを借りて改良→逆輸入」

* 目的 : 他人のリポジトリを自分のアカウントにコピーして改良し、PRを送る
* 手順 : リポジトリ画面で Fork → 自分側で変更 → 相手リポジトリへ PR

--------------------------
6. Release / Tag : 「ここが正式版！の旗立て」

* 目的 : バージョン番号や公開の節目を記録
* 手順 :
  git tag v1.0.0
  git push origin v1.0.0
  あるいは GitHub の Releases から作成

--------------------------
7. .gitignore / Secrets : 「上げちゃダメ系を守る」

* .gitignore : APIキーや node\_modules など、Git 管理から除外するファイルを指定
* Secrets : GitHub側で環境変数やパスワードを暗号化して保存（Actionsで使用）

--------------------------
8. Code Review : 「味の感想＆アドバイス」

* 目的 : PRでコードを確認し、コメントを付けて品質を高める
* 手順 : PR の Files changed タブでコメント → 修正 → 再 push → Merge

--------------------------
## おすすめの最初の習得ステップ

* PRを使ってブランチごとに作業を区切る
* TODOやバグは Issues で管理
* 秘密情報は .gitignore / Secrets で保護
* 慣れたら GitHub Actions で自動デプロイ